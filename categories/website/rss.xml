<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Atri Hegde - Website</title>
        <link>https://hegdeatri.com</link>
        <description>A simple blog theme focused on writing powered by Bulma and Zola</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://hegdeatri.com/categories/website/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 11 Jul 2022 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Warehouse Management</title>
            <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
            <link>https://hegdeatri.com/projects/warehouse-management/</link>
            <guid>https://hegdeatri.com/projects/warehouse-management/</guid>
            <description>&lt;h1 id=&quot;warehouse-management&quot;&gt;Warehouse Management&lt;&#x2F;h1&gt;
&lt;p&gt;This project is currently in the planning phase!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;current-problems-analysis&quot;&gt;Current problems + Analysis&lt;&#x2F;h2&gt;
&lt;p&gt;There are no free warehouse management software that is tested for exploits, or can be written in unsafe code.
My goal for this project is to build a reliable application that can be used on a daily basis.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;plan&quot;&gt;Plan&lt;&#x2F;h2&gt;
&lt;p&gt;My project will include two Stages, getting a desktop app working with a backend database, and then getting
a website working that can be used for customers&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stage-1&quot;&gt;Stage 1&lt;&#x2F;h3&gt;
&lt;p&gt;Cross-platform desktop app that can be used by staff&#x2F;internal use only.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stage-2&quot;&gt;Stage 2&lt;&#x2F;h3&gt;
&lt;p&gt;A website that can be used by customers to order your goods.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;design&quot;&gt;Design&lt;&#x2F;h2&gt;
&lt;p&gt;I am considering using either Avalonia UI or .NET MAUI frameworks as both provide me with a single codebase for all platforms (mobile + desktop + web).
Unfortunately .NET MAUI, the framework I wanted to use does not support Linux.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;build&quot;&gt;Build&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;maintainance&quot;&gt;Maintainance&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;extra&quot;&gt;Extra&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to use this software in a professional setting, and would like addition of specific
features&#x2F;compatability (example: support for ARM devices with NFC login) get in contact with me through my email: &lt;a href=&quot;mailto:atri@hegdeatri.com&quot;&gt;atri@hegdeatri.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Pricing for support coming soon.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Make your own website! ft. Zola</title>
            <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
            <link>https://hegdeatri.com/posts/first-website-tutorial/</link>
            <guid>https://hegdeatri.com/posts/first-website-tutorial/</guid>
            <description>&lt;h1 id=&quot;make-your-own-website-ft-zola&quot;&gt;Make your own website ! ft. Zola&lt;&#x2F;h1&gt;
&lt;p&gt;Zola is a static site generator, that uses templates to transform your content into static
html pages. This means that development can be simple and quick, while also being easily modifiable.
This site was built using Zola! It is incredibly easy to add posts&#x2F;projects and extend the site with more
sections if needed. In this post, I will go through how to setup a website project using Zola.&lt;&#x2F;p&gt;
&lt;p&gt;Zola also has &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;overview&quot;&gt;excellent documentation&lt;&#x2F;a&gt; that you should check out if you choose to use it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-zola&quot;&gt;Installing Zola&lt;&#x2F;h2&gt;
&lt;p&gt;You can install zola on your system by referring to their &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;installation&#x2F;&quot;&gt;installation guide&lt;&#x2F;a&gt;.
If you are using Arch Linux, you can simply install the zola package.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#6c7079;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pacman&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eb6772;&quot;&gt; -S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; zola
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-your-project&quot;&gt;Creating your project&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;choosing-theme&quot;&gt;Choosing theme&lt;&#x2F;h2&gt;
&lt;p&gt;One of the best options that comes with zola is to use one of many themes that users have created.
You can view the themes on their &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;&quot;&gt;website&lt;&#x2F;a&gt;. This
makes creating our website much more simpler as we do not have to worry about writing CSS for our site
(CSS is way of styling a webpage). I have chosen the &lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Banking Application</title>
            <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
            <link>https://hegdeatri.com/projects/banking-application/</link>
            <guid>https://hegdeatri.com/projects/banking-application/</guid>
            <description>&lt;p&gt;This project was chosen as my Non Exam Assessment coursework for Computer Science (2021-2022) A-level. Although the project isn&#x27;t as polished as it can be,
the quality of code written has improved significantly towards the end of the project. Due to deadlines of the project, colour scheme and design language
is not 100% consistent nor is it meant to be. This is my first &amp;quot;from scratch&amp;quot; website, working with Angular and .NET. Therefore this is almost as a big 
reference project I will build upon in other projects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;banking-application-front-end&quot;&gt;Banking Application - &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hegde-atri&#x2F;BankingApplication-fe&quot;&gt;front end&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This project is made using the Angular framework. My planning pdf with various diagrams can be seen &lt;a href=&quot;final.pdf&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For the theming and design of the website, I decided to try using Angular material which looked professional and seemed
to have all the components I needed. I have also implemented graphs and steppers in reactive forms. The forms also 
feature validation and validation hints. Most buttons also have tooltips.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve learnt a lot of web development skills with this, such as &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Calling CRUD API&#x27;s.&lt;&#x2F;li&gt;
&lt;li&gt;Formatting data into something visually appealing.&lt;&#x2F;li&gt;
&lt;li&gt;Pagination in tables.&lt;&#x2F;li&gt;
&lt;li&gt;Graphs from user data.&lt;&#x2F;li&gt;
&lt;li&gt;Routing and guarding routes (i.e. block manager pages when logged in as a customer.)&lt;&#x2F;li&gt;
&lt;li&gt;Searching and filtering through items to be displaced&lt;&#x2F;li&gt;
&lt;li&gt;Dynamically display items based on user data.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The Azure B2C authentication can be done in 2 different methods, either through a popup or through redirection, both methods store a cookie
to remember session details (i.e. keeps you logged in). I have also made use of a JWT token, and decoded to get first name, email and other information 
displayed on the navbar.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;banking-application-back-end&quot;&gt;Banking Application - &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hegde-atri&#x2F;BankingApplication-be&quot;&gt;back end&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The backend solution is comprised of 2 projects. The API project, the EF Core project.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;api&quot;&gt;API&lt;&#x2F;h3&gt;
&lt;p&gt;First I created my model classes, which will get mapped data from the database. These model classes will have only the fields required
by the front end website. This abstraction also helps us remove any sensitive fields that we need to remove.&lt;&#x2F;p&gt;
&lt;p&gt;Each controller folder (can be viewed &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hegde-atri&#x2F;BankingApplication-be&#x2F;tree&#x2F;main&#x2F;Bank.API&#x2F;Controllers&quot;&gt;here&lt;&#x2F;a&gt;) have their own repository interfaces that contain only the necassary methods. 
Each controller folder also has its required controller classes. With this we can add authentication, and required scopes for the api paths,
making sure that each user can only use api&#x27;s withing their scope set in Azure B2C.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ef-core&quot;&gt;EF Core&lt;&#x2F;h3&gt;
&lt;p&gt;You can find the project under the Bank.Data folder. It contains the entities folder, from which EF core generates
database schemas and the Migrations folder which EF Core uses to make changes to the database schema. This allows for
&amp;quot;versioning&amp;quot; of our database, allowing us to rollback if a new change breaks the database&#x2F;service or isn&#x27;t what we
expected it to be. I have used EF Core in conjunction with Microsoft SQL Server.&lt;&#x2F;p&gt;
&lt;p&gt;I have written a trigger for new transaction entries on the database (in the SQL folder).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;objectives&quot;&gt;Objectives&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;user&quot;&gt;User&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;User will be able to login using his credentials.&lt;&#x2F;li&gt;
&lt;li&gt;User entered email should be verified with a confirmation email.&lt;&#x2F;li&gt;
&lt;li&gt;User should be able to change their password (Azure B2C).&lt;&#x2F;li&gt;
&lt;li&gt;User should be able to setup 2 Factor Authentication (2FA).&lt;&#x2F;li&gt;
&lt;li&gt;Support user management using Azure Active Directories.&lt;&#x2F;li&gt;
&lt;li&gt;Use authentication standard of OpenID &#x2F; OAuth&lt;&#x2F;li&gt;
&lt;li&gt;Customers logged in should have a persistent access to the navbar.&lt;&#x2F;li&gt;
&lt;li&gt;Edit details of existing payee.&lt;&#x2F;li&gt;
&lt;li&gt;View transaction history&lt;&#x2F;li&gt;
&lt;li&gt;Filter transaction history&lt;&#x2F;li&gt;
&lt;li&gt;Search transaction history&lt;&#x2F;li&gt;
&lt;li&gt;Personal details can be viewed censored, so that it can be viewed in libraries or any other public places.&lt;&#x2F;li&gt;
&lt;li&gt;View when their details was last changed, and by whom it was changed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;teller&quot;&gt;Teller&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Deposit&#x2F;Withdraw money using account number.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;officer&quot;&gt;Officer&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Create customer account.&lt;&#x2F;li&gt;
&lt;li&gt;View transaction history of customer.&lt;&#x2F;li&gt;
&lt;li&gt;View accounts table.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;manager&quot;&gt;Manager&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Should be able to create Teller and Branch officer accounts.&lt;&#x2F;li&gt;
&lt;li&gt;View all users registered - customers, tellers and branch officers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>hegdeatri-dot-com</title>
            <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
            <link>https://hegdeatri.com/projects/hegdeatri-dot-com/</link>
            <guid>https://hegdeatri.com/projects/hegdeatri-dot-com/</guid>
            <description>&lt;h1 id=&quot;personal-website-github&quot;&gt;Personal website &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hegdeatri.com&quot;&gt;(GitHub)&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;After a trying out a bunch different frameworks including - yew, blazor, angular and gatsby, I have decided 
to use zola for my website. Reasons being:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Its very easy to update and add new stuff in markdown.&lt;&#x2F;li&gt;
&lt;li&gt;Very fast.&lt;&#x2F;li&gt;
&lt;li&gt;Can build upon an already existing theme, and its templates.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After reading through some excellent docs at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;getting-started&#x2F;overview&#x2F;&quot;&gt;getzola.org&lt;&#x2F;a&gt;,
I chose my theme of choice which was &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;deepthought&#x2F;&quot;&gt;DeepThought&lt;&#x2F;a&gt;, and started hacking away at
the config.toml and make my own template for the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hegdeatri.com&#x2F;about&quot;&gt;about page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I plan on making a video that will walk through setting up a small website on my &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCHZwj1GpsDQ3B9S5VjeY36A&quot;&gt;youtube channel&lt;&#x2F;a&gt; sometime in the future.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
